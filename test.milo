#load "windows.milo"
#load "gl.milo"

copy_string :: (s: string) -> string {
	memory: *u8 = allocate(string_length(s) + 1)
	
	buf := memory
	
	for s {
		<< memory = it
		memory += 1
	}
	
	<< memory = 0
	
	return cast() buf
}

args: []string

ListNode :: struct {
	value: string;
	next: *ListNode;
}

min :: (a: u64, b: u64) -> u64 {
	if a < b 
		return a
	else 
		return b
}

max :: (a: u64, b: u64) -> u64 {
	if a > b 
		return a
	else 
		return b
}

add_string :: (array: *[..] string, value: string) {
	if (array.count >= array.capacity) {
		array.capacity = max(array.count * 2, 4)
		
		array.data = reallocate(array.data, array.capacity * size_of(type_of(value)))
	}
	
	array.data[array.count] = value
	array.count += 1
}

string_length :: (s: string) -> u64 {
	len: u64 = 0
	while s[len] len += 1

	return len
}



print_string :: (s: string) {
	buffer: []u8
	
	buffer.data = cast() s
	buffer.count = string_length(s)

	print_buffer(buffer)
}


parse_command_line :: (cmd: string) -> [] string {
	line := cast(*u8) copy_string(cmd)

	args: [..]string
	
	
	s := cast(*u8) cmd
	
	if ! <<s
		return args
	
	if << s == '"' {
		s += 1
		line += 1
		
		add_string(*args, cast() line)
		
		while << s {
			if << s == '"'
				break;
			
			line += 1
			s += 1
		}
	} else {
		add_string(*args, cast() line)
		
		while << s {
			if << s == ' ' || << s == '\t'
				break;
			
			line += 1
			s += 1
		}
	}
	
	<< line = 0
	
	line += 1
	s += 1
	
	while << s == ' ' || << s == '\t' {
		s += 1
		line += 1
	}
	
	if ! <<s
		return args
		
	add_string(*args, cast() line)
	
	// @Incomplete
	
	return args
}


main :: () -> s32 {
	//args.data = argv
	//args.count = cast(u64) argc
	init_runtime()

	_main()

	return 0
}

get_command_line_arguments :: () -> []string {
	return args
}

factorial :: (n: u64) -> u64 {
	return 10000000 // Haha! you have resolved the wrong function
}

test :: () {
	a : *u8
	b : *u8

	for a .. b
		factorial(it_index) // dummy code
}

get_strings :: () -> [] string {
	a: [..] string

	add_string(*a, "Test1")
	add_string(*a, "Test2")

	return a
}

get_linked_strings :: () -> ListNode {
	a: ListNode
	a.value = "LinkedTest1"
	a.next = allocate(size_of(ListNode))
	
	b := a.next
	b.value = "LinkedTest2"
	b.next = null
	
	return a
}

u64_to_string :: (value: u64) -> string {
	if value == 0 {
		result := cast(*u8) allocate(2)
		result[0] = '0'
		result[1] = 0
		
		return cast() result
	}

	digitCount: u64
	
	remaining := value
	
	while remaining {
		digitCount += 1
		
		remaining /= 10
	}
	
	result := cast(*u8) allocate(digitCount + 1)
	
	result += digitCount;
	
	<<result = 0
	remaining = value
	
	while remaining {
		result -= 1;
		
		<<result = cast() (remaining % 10 + '0')
		remaining /= 10
	}
	
	return cast() result
}

print_u64 :: (num: u64) {
	s := u64_to_string(num)
	print_string(s)
	
	deallocate(cast() s)	
}

find_string :: (array: []string, s: string) {
	for array {
		if it == s {
			index := u64_to_string(it_index)
			
			print_string(index)
			print_string(": found ")
			print_string(s)
			print_string("\n")
			
			deallocate(cast() index)
			
			break
		}
	} completed {
		print_string("Couldn't find ")
		print_string(s)
		print_string("\n")
	}
	
}

should_quit: bool

window_width: s32 = 1280
window_height: s32 = 720

counter_scale: f32

Bmp_File_Header :: struct #pack {
	header: [2]u8
	file_size: u32
	reserved1: u16
	reserved2: u16
	offset_to_image: u32
}

Bmp_Dib_Header :: struct {
	header_size: u32
	width: s32
	height: s32
	color_plane_count: u16
	bits_per_pixel: u16
	compression_method: u32
	image_size: u32
	horizontal_resolution: u32
	vertical_resolution: u32
	palette_color_count: u32
	important_color_count: u32
	red_mask: u32
	green_mask: u32
	blue_mask: u32
	alpha_mask: u32
	
	BI_RGB       :: 0
	BI_BITFIELDS :: 3
}

check_gl_errors :: () {
	while true {
		error := glGetError()
		
		if !error
			break;
			
		print_string("GL error: ")
		print_u64(error)
		print_string("\n")
	}

}

load_image :: (filename: string) -> u32 {
	success: bool
	
	file := read_entire_file(filename, *success)
	
	if !success {
		return 0
	}
	
	if file.count < size_of(Bmp_File_Header) + size_of(Bmp_Dib_Header) {
		deallocate(file.data)
		return 0
	}

	file_header := cast(*Bmp_File_Header)file.data
	dib_header := cast(*Bmp_Dib_Header)(file.data + size_of(Bmp_File_Header))
	
	if file_header.header[0] != 'B' || file_header.header[1] != 'M' || file_header.file_size != file.count {
		deallocate(file.data)
		return 0
	}
	
	
	if dib_header.bits_per_pixel != 32 || 
		dib_header.compression_method != Bmp_Dib_Header.BI_BITFIELDS || 
		dib_header.alpha_mask != 0xFF000000 ||
		dib_header.red_mask   != 0x00FF0000 ||
		dib_header.green_mask != 0x0000FF00 ||
		dib_header.blue_mask  != 0x000000FF ||
		dib_header.height <= 0 {
		
		deallocate(file.data)
		return 0
	}
	
	data: [4]u32
	
	texture: u32
	
	glGenTextures(1, *texture)
	glBindTexture(GL_TEXTURE_2D, texture)
	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP)
	
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, dib_header.width, dib_header.height, 0, GL_BGRA_EXT, GL_UNSIGNED_BYTE, file.data + file_header.offset_to_image)
	//glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 2, 2, 0, GL_RGBA, GL_UNSIGNED_BYTE, *data)
	
	return texture
}

_main :: () {
/*
	for get_strings() {
		//if it_index {
			print_string(it)
			print_string(" ")
		//}
	}
	*/
	
	performance_counter_frequency: s64
	
	QueryPerformanceFrequency(*performance_counter_frequency)
	
	counter_scale = 1.0 / cast(f32) performance_counter_frequency
	
	startup_info: STARTUPINFOW
	
	GetStartupInfoW(*startup_info)
	
	show_command := SW_SHOWDEFAULT
	
	if (startup_info.dwFlags & STARTF_USESHOWWINDOW) {
		show_command = startup_info.wShowWindow
	}
	
	instance := GetModuleHandleW(null)
	
	class_name := create_wide_string("Window Class")
	window_class: WNDCLASSW
	
	window_class.style = CS_OWNDC | CS_VREDRAW | CS_HREDRAW
	window_class.lpfnWndProc = (hwnd: HWND, uMsg: u32, wParam: u64, lParam: s64) -> s64 {
		if uMsg == WM_CLOSE {
			DestroyWindow(hwnd)
		} else if uMsg == WM_DESTROY {
			PostQuitMessage(0)
		} else if uMsg == WM_PAINT {
			paint: PAINTSTRUCT = --
			
			dc := BeginPaint(hwnd, *paint)
			EndPaint(hwnd, *paint)
		} else if uMsg == WM_SIZE {
			client_rect: RECT = --
			
			GetClientRect(hwnd, *client_rect)
			
			window_width = client_rect.right - client_rect.left
			window_height = client_rect.bottom - client_rect.top
		} else {
			return DefWindowProcW(hwnd, uMsg, wParam, lParam)
		}
		
		return 0
	}
	window_class.hInstance = instance
	window_class.lpszClassName = class_name
	window_class.hbrBackground = GetStockObject(BLACK_BRUSH)
	
	
	if RegisterClassW(*window_class) == 0 {
		print_string("Failed to register window class\n")
		print_string(u64_to_string(GetLastError()))
		return;
	}
	
	
	window_handle := CreateWindowExW(lpClassName = class_name, lpWindowName = create_wide_string("Test Window"), dwStyle = WS_OVERLAPPEDWINDOW ^ WS_THICKFRAME, nWidth = window_width, nHeight = window_height, hInstance = instance)
	
	if window_handle == null {
		print_string("Failed to open window\n")
		print_string(u64_to_string(GetLastError()))
		return;
	}
	
	device_context := GetDC(window_handle)
	
	desired_format: PIXELFORMATDESCRIPTOR
	desired_format.dwFlags = PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW | PFD_DOUBLEBUFFER
	desired_format.cColorBits = 32
	desired_format.cAlphaBits = 8
	desired_format.iLayerType = PFD_MAIN_PLANE
	
	found_format := ChoosePixelFormat(device_context, *desired_format)
	
	if found_format == 0 {
		print_string("Could not find a pixel format\n")
		return;
	}
	
	used_format: PIXELFORMATDESCRIPTOR
	
	if !SetPixelFormat(device_context, found_format, *used_format) {
		print_string("Failed to set pixel format")
		return;
	}
	
	
	gl_context := wglCreateContext(device_context)
	
	if !gl_context {
		print_string("Failed to create gl context")
		return;
	}
	
	wglMakeCurrent(device_context, gl_context)
	
	
	load_gl_extensions()
	wglSwapIntervalEXT(1)
	
	
	glEnable(GL_TEXTURE_2D)
	texture := load_image("Invaders/Spaceship.bmp")
	
	glEnable(GL_BLEND)
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
	
	ShowWindow(window_handle, cast() show_command)
	
	last_time: s64

	
	QueryPerformanceCounter(*last_time)
	
	while !should_quit {
		message: MSG = --
		
		while PeekMessageW(*message, null, 0, 0, PM_REMOVE) {
			if (message.message == WM_QUIT) {
				should_quit = true
				break
			}
			
			TranslateMessage(*message)
			DispatchMessageW(*message)
		}
		
		current_time: s64
		
		QueryPerformanceCounter(*current_time)
		
		delta := cast() (current_time - last_time) * counter_scale
	
		glViewport(0, 0, window_width, window_height)
		glClearColor(0, 0.1, 0.2, 0)
		glClear(GL_COLOR_BUFFER_BIT)
		
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity()
		glOrtho(0, 1280, 0, 720, -5, 5)
		
		glBindTexture(GL_TEXTURE_2D, texture)
		glBegin(GL_QUADS)
		
		glTexCoord2f(0, 0)
		glVertex2f(100, 100)
		
		
		glTexCoord2f(1, 0)
		glVertex2f(228, 100)
		
		
		glTexCoord2f(1, 1)
		glVertex2f(228, 228)
		
		
		glTexCoord2f(0, 1)
		glVertex2f(100, 228)
		
		glEnd()
		
		SwapBuffers(device_context)
		
		last_time = current_time
	}
	
	wglDeleteContext(gl_context)
	ReleaseDC(window_handle, device_context)
	
	ExitProcess(0)
}

factorial2 :: (n: u64) -> u64 {
	total: u64 = 1
	
	for 2 .. n + 1 total *= it
	
	return total
}
