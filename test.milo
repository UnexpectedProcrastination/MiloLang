#load "windows.milo"

copy_string :: (s: string) -> string {
	memory: *u8 = allocate(string_length(s) + 1)
	
	buf := memory
	
	for s {
		<< memory = it
		memory += 1
	}
	
	<< memory = 0
	
	return cast() buf
}

args: []string

ListNode :: struct {
	value: string;
	next: *ListNode;
}

min :: (a: u64, b: u64) -> u64 {
	if a < b 
		return a
	else 
		return b
}

max :: (a: u64, b: u64) -> u64 {
	if a > b 
		return a
	else 
		return b
}

add_string :: (array: *[..] string, value: string) {
	if (array.count >= array.capacity) {
		array.capacity = max(array.count * 2, 4)
		
		array.data = reallocate(array.data, array.capacity * size_of(type_of(value)))
	}
	
	array.data[array.count] = value
	array.count += 1
}

string_length :: (s: string) -> u64 {
	len: u64 = 0
	while s[len] len += 1

	return len
}



print_string :: (s: string) {
	buffer: []u8
	
	buffer.data = cast() s
	buffer.count = string_length(s)

	print_buffer(buffer)
}


parse_command_line :: (cmd: string) -> [] string {
	line := cast(*u8) copy_string(cmd)

	args: [..]string
	
	
	s := cast(*u8) cmd
	
	if ! <<s
		return args
	
	if << s == '"' {
		s += 1
		line += 1
		
		add_string(*args, cast() line)
		
		while << s {
			if << s == '"'
				break;
			
			line += 1
			s += 1
		}
	} else {
		add_string(*args, cast() line)
		
		while << s {
			if << s == ' ' || << s == '\t'
				break;
			
			line += 1
			s += 1
		}
	}
	
	<< line = 0
	
	line += 1
	s += 1
	
	while << s == ' ' || << s == '\t' {
		s += 1
		line += 1
	}
	
	if ! <<s
		return args
		
	add_string(*args, cast() line)
	
	// @Incomplete
	
	return args
}


main :: () -> s32 {
	//args.data = argv
	//args.count = cast(u64) argc
	init_runtime()

	_main()

	return 0
}

get_command_line_arguments :: () -> []string {
	return args
}

factorial :: (n: u64) -> u64 {
	return 10000000 // Haha! you have resolved the wrong function
}

test :: () {
	a : *u8
	b : *u8

	for a .. b
		factorial(it_index) // dummy code
}

get_strings :: () -> [] string {
	a: [..] string

	add_string(*a, "Test1")
	add_string(*a, "Test2")

	return a
}

get_linked_strings :: () -> ListNode {
	a: ListNode
	a.value = "LinkedTest1"
	a.next = allocate(size_of(ListNode))
	
	b := a.next
	b.value = "LinkedTest2"
	b.next = null
	
	return a
}

u64_to_string :: (value: u64) -> string {
	if value == 0 {
		result := cast(*u8) allocate(2)
		result[0] = '0'
		result[1] = 0
		
		return cast() result
	}

	digitCount: u64
	
	remaining := value
	
	while remaining {
		digitCount += 1
		
		remaining /= 10
	}
	
	result := cast(*u8) allocate(digitCount + 1)
	
	result += digitCount;
	
	<<result = 0
	remaining = value
	
	while remaining {
		result--
		
		<<result = cast() (remaining % 10 + '0')
		remaining /= 10
	}
	
	return cast() result
}

find_string :: (array: []string, s: string) {
	for array {
		if it == s {
			index := u64_to_string(it_index)
			
			print_string(index)
			print_string(": found ")
			print_string(s)
			print_string("\n")
			
			deallocate(cast() index)
			
			break
		}
	} completed {
		print_string("Couldn't find ")
		print_string(s)
		print_string("\n")
	}
	
}

_main :: () {
/*
	for get_strings() {
		//if it_index {
			print_string(it)
			print_string(" ")
		//}
	}
	*/
	
	list := get_strings();
	
	find_string(list, "Test2")
	find_string(list, "Hello")
	find_string(list, "Test1")
}

factorial2 :: (n: u64) -> u64 {
	total: u64 = 1
	
	for 2 .. n + 1 total *= it
	
	return total
}
