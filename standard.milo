#load "windows.milo"

min :: (a: u64, b: u64) -> u64 {
	if a < b 
		return a
	else 
		return b
}

max :: (a: u64, b: u64) -> u64 {
	if a > b 
		return a
	else 
		return b
}

string_length :: (s: string) -> u64 {
	len: u64 = 0
	while s[len] len += 1

	return len
}



print_string :: (s: string) {
	buffer: []u8
	
	buffer.data = cast() s
	buffer.count = string_length(s)

	print_buffer(buffer)
}

copy_string :: (s: string) -> string {
	memory: *u8 = allocate(string_length(s) + 1)
	
	buf := memory
	
	for s {
		<< memory = it
		memory += 1
	}
	
	<< memory = 0
	
	return cast() buf
}

args: []string

add_string :: (array: *[..] string, value: string) {
	if (array.count >= array.capacity) {
		array.capacity = max(array.count * 2, 4)
		
		array.data = reallocate(array.data, array.capacity * size_of(type_of(value)))
	}
	
	array.data[array.count] = value
	array.count += 1
}


main :: () -> s32 {
	//args.data = argv
	//args.count = cast(u64) argc
	init_runtime()

	_main()

	return 0
}

get_command_line_arguments :: () -> []string {
	return args
}

u64_to_string :: (value: u64) -> string {
	if value == 0 {
		result := cast(*u8) allocate(2)
		result[0] = '0'
		result[1] = 0
		
		return cast() result
	}

	digitCount: u64
	
	remaining := value
	
	while remaining {
		digitCount += 1
		
		remaining /= 10
	}
	
	result := cast(*u8) allocate(digitCount + 1)
	
	result += digitCount;
	
	<<result = 0
	remaining = value
	
	while remaining {
		result -= 1;
		
		<<result = cast() (remaining % 10 + '0')
		remaining /= 10
	}
	
	return cast() result
}

print_u64 :: (num: u64) {
	s := u64_to_string(num)
	print_string(s)
	
	deallocate(cast() s)	
}