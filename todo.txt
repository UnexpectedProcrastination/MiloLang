enums
 - Do we allow signed enums?
 - array of names
 - array of values
 - is_indexable -> do the enum values go in order from 0..N, so the names array can be indexed directly with the enum value
 - largest_value
 - smallest_value 
 
array literals

struct literals

	
Make it a compile time error to out of bounds index a static array if the index is a constant
 - Compile time error for constant negative index of normal and dynamic arrays?
 - Compile time error for things that are an array literal of normal or dynamic type

Allow casting any to any type

Compile option for runtime checking
 - Array bounds checking
 - Cast bounds checking
 - Check casts from any to a type

Function inlining

Rotate operators

Allow logical shifting of signed values

C Varargs for external functions

Make comma assignments work for things other than function calls
 - i.e. a, b = b, a to do a swap thats not gross
 - Do we really need this, I can't think of any other use cases than a swap, if we really want this functionality, maybe just add a swap primitive i.e. #swap a, b

string representation
 - same memory as []u8 but a different type (allow casting?)
   - different types convey intent
   - can have separate display behaviour (when printing and debugging)
 - string literals implicitly convert to C-strings
   - is it worth having implict conversion to utf16 C-strings (windows wide strings) and utf32 C-strings
   
 - utf16 and utf32 string types?
 
error if non-void functions don't have all control paths return

function overloading

performance
 - Profile TypeTable.cpp
 - Call infer fewer times -- significantly improved since todo orignally added but can still be better
   - graph theory
 - More fast paths for trival type inference
 - Allocator in Infer.cpp, TypeTable.cpp
 - Ensure sufficient space to write all instructions in coff writer so we don't do a bounds check for each byte written
 - Multithread ir generator
 - Multithread coff writer?
 - Multithread parser and lexer - Write obj faster (somehow)
 - Get rid of linker
 - Multithread type inference (nightmare nightmare nightmare)
 

Allow #if to insert members into structs
 - Best way to do this is probably to have #if move its declarations into the outer scope and replace them with imports instead of it placing imports in the outer scope
Allow #if to conditionally execute #load
 
debug info
 - show locals
 - emit struct information
 - emit S_UDT for constant type declarations
 - emit constants
 - deal with the local function nightmare
 - do we have to do some natvis embedding bs to get arrays to show correctly in the debugger
 
improve external function interface
 - don't hardcode lib files to link with
 - separate function types for external functions (so our calling convention doesn't need to be C-compatible)
 - parse C header files so we don't need to manually declare external functions
 
change completed keyword (its ugly and completed is something you want to call an identifer)
 - else
 - no_break
 - or
 
llvm

 
predefined constant variables
 - BUILD_WINDOWS, BUILD_LINUX, etc...
 
#tag
 - Mark an if statement as #tag, if a struct member is compared to a type, the struct will imlicitly convert to that type in the if body
 - Make it work using box type
 - Work with switch if
 
utf8 identifiers?

run ir at compile time

function polymorhpism
struct polymorhpism

syntax for array slicing
 - array[1..4]
 - array[..4]
 - array[1..]
 - option for slice bounds checking