enums
 - Do we allow signed enums?
 - array of names
 - array of values
 - is_indexable -> do the enum values go in order from 0..N, so the names array can be indexed directly with the enum value
 - largest_value
 - smallest_value 
 
Cleanup the way importers work

Make constexpr slices work

array literals

struct literals

Make how the infer phase being completed is checked better

Reduce specific handling of global scope

Give compile time execution new abilities
 - Add files/strings to compilation
 - Control build settings i.e. optimization, bounds checking
 - Receive information about program
 - Report errors and warnings

Allow multiple arguments to be varargs
Allow c varargs for external (and maybe c_call) functions

Move sleepingOnMe onto SubJob

Move ir generation to infer thread?
 
Syntax for for loops to iterate in reverse

Modules
 - Allow symbols to be locally scoped to a module
 - Modules searched for relative to the path to the compiler binary, instead of the working directory


Standard modules
 - Hashtable
 - Math
 - String manipulation
 - File I/O
 - Standard basic operations -> array_add, memory allocation, printing?
 
 
Emit calls to __chkstk (or our own version of __chkstk if we don't want to depend on the CRT) when the stack allocation size is too large
 
Remove void 
 - Functions with no return will just have 0 return types
 - Replace *void with another type that has the same operations, but doesn't have pointer syntax
   - Having pointer syntax makes it seem like it should be dereferencable
   - Pointer syntax means its not intuitive that it should be able to represent a function as well
   - Call new type something like pointer or memory


Allow symbols to be locally scoped to a file
	
Make it a compile time error to out of bounds index a static array if the index is a constant
 - Compile time error for constant negative index of normal and dynamic arrays?
 - Compile time error for things that are an array literal of normal or dynamic type

Make auto cast work in more places where the target type is known
 - Array/pointer type
 - Array type count slot
 - Array index
 - Array slice start/end
 

Compile option for runtime checking
 - Array bounds checking
 - Cast bounds checking
 - Check casts from any to a type
 - Slice bounds checking
 - Integer overflow
 - Check that if == #complete { never hits an else case (i.e. only valid enums are given)
 
 
Should this be legal

	Enum :: enum {
		A
		B
	}

	// Currently this is an error because not all control paths return a value
	is_a :: (e: Enum) -> bool {
		if e == #complete {
			case .A
				return true
			case .B
				return false
		}
	}
	
	- If this is legal than a program would be in an undefined state if an enum had an out of range value

Function inlining

Rotate operators

Allow logical shifting of signed values

C Varargs for external functions

Make comma assignments work for things other than function calls
 - i.e. a, b = b, a to do a swap thats not gross
 - Do we really need this, I can't think of any other use cases than a swap, if we really want this functionality, maybe just add a swap primitive i.e. #swap a, b

string representation
 - is it worth having implict conversion to utf16 C-strings (windows wide strings) and utf32 C-strings
 - utf16 and utf32 string types?

function overloading

performance
 - Profile TypeTable.cpp
 - Call infer fewer times -- significantly improved since todo orignally added but can still be better
   - graph theory
 - More fast paths for trival type inference
 - Allocator in Infer.cpp, TypeTable.cpp
 - Ensure sufficient space to write all instructions in coff writer so we don't do a bounds check for each byte written
 - Multithread ir generator
 - Multithread coff writer?
 - Multithread parser and lexer - Write obj faster (somehow)
 - Get rid of linker
 - Multithread type inference (nightmare nightmare nightmare)
 
 
Memory usage
 - Where could memory be freed simply
 - Minimise wasted allocations if inference yields (i.e. function/return argument sorting)

Allow #if to conditionally execute #load
 
debug info
 - emit S_UDT for constant type declarations
 - emit constants
 - deal with the local function nightmare
 - emit debug info for llvm

LLVM
 - optimizations
 - Allow control of LLVM options
 - Change llvm backend to use IR instead of the ast


improve external function interface
 - parse C header files so we don't need to manually declare external functions
 
predefined constant variables
 - BUILD_WINDOWS, BUILD_LINUX, etc...
 
#tag
 - Mark an if statement as #tag, if a struct member is compared to a type, the struct will imlicitly convert to that type in the if body
 - Make it work using box type
 - Work with switch if
 
utf8 identifiers?

Investigate LINK : fatal error LNK1285: corrupt PDB file

function polymorhpism
struct polymorhpism