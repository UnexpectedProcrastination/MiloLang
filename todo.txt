using at global scope

enums
 - Do we allow signed enums?
 - flag enums -> allow bitwise operators, |, &, ~ (do not allow signed)
 - 

multiple return values
 - Named return values
 - Return values are declarations
 - ABI
   - 
 
varargs
 - 
 
string representation
 - same memory as []u8 but a different type (allow casting?)
   - different types convey intent
   - can have separate display behaviour (when printing and debugging)
 - string literals implicitly convert to C-strings
   - is it worth having implict conversion to utf16 C-strings (windows wide strings) and utf32 C-strings
 
error if non-void functions don't have all control paths return

function overloading

performance
 - Profile TypeTable.cpp
 - Call infer fewer times - go through fewer InferJobs each iteration 
   - graph theory?
 - More fast paths for trival type inference
 - Allocator in Infer.cpp, TypeTable.cpp
 - Ensure sufficient space to write all instructions in coff writer so we don't do a bounds check for each byte written
 - Multithread ir generator
 - Multithread coff writer?
 - Multithread parser and lexer - Write obj faster (somehow)
 - Multithread type inference (nightmare nightmare nightmare)
 

#if
 - Syntax if both blocks checked, type checking only happens for chosen block


remove hardcoded linker path
 - 

runtime manipulation of type values
 - ==, !=
 - get runtime type info (shouldn't require a constant type)
 
debug info
 - show locals
 - emit struct information
 - emit S_UDT for constant type declarations
 - emit constants
 - deal with the local function nightmare
 - do we have to do some natvis embedding bs to get arrays to show correctly in the debugger
 
improve external function interface
 - don't hardcode lib files to link with
 
llvm

runtime type information
 - size, struct members, signedness, arguments, pointer to, etc.
 
box type
 - struct containing pointer to value and type information
 
predefined constant variables
 - BUILD_WINDOWS, BUILD_LINUX, etc...
 
#tag
 - Marks a struct member of type "type" as the tag for the struct, if the struct tag is compared to a type in an if statement, in the body of the if statement the struct will be implicitly casted to the tag
 - Alternatively mark the if statement as #tag instead of a struct member
 - Make it work using box type?
 
utf8 identifiers?

run ir

