#load "standard.milo"
#load "windows.milo"

window_width: s32 = 1280
window_height: s32 = 720



_main :: () {
	startup_info: STARTUPINFOW
	
	GetStartupInfoW(*startup_info)
	
	show_command: u16 = SW_SHOWDEFAULT
	
	if startup_info.dwFlags & STARTF_USESHOWWINDOW {
		show_command = startup_info.wShowWindow
	}
	
	instance := GetModuleHandleW(null)
	
	class_name := create_wide_string("Window Class")
	window_class: WNDCLASSW
	
	window_class.style = CS_OWNDC | CS_VREDRAW | CS_HREDRAW
	window_class.lpfnWndProc = (hwnd: HWND, uMsg: MSG.Message, wParam: u64, lParam: s64) -> s64 {
		if uMsg == {
			case WM_CLOSE
				DestroyWindow(hwnd)
				
			case WM_DESTROY
				PostQuitMessage(0)
				
			case WM_PAINT
				paint: PAINTSTRUCT = --
				
				dc := BeginPaint(hwnd, *paint)
				EndPaint(hwnd, *paint)
				
			case WM_SIZE
				client_rect: RECT = --
				
				GetClientRect(hwnd, *client_rect)
				
				window_width = client_rect.right - client_rect.left
				window_height = client_rect.bottom - client_rect.top
				
				print(cast() window_width)
				print("x")
				print(cast() window_height)
				print("\n----------\n")
				
			else
				return DefWindowProcW(hwnd, uMsg, wParam, lParam)
		}
		
		return 0
	}
	window_class.hInstance = instance
	window_class.lpszClassName = class_name
	window_class.hbrBackground = GetStockObject(BLACK_BRUSH)
	
	
	if RegisterClassW(*window_class) == 0 {
		print("Failed to register window class\n")
		print(GetLastError())
		return
	}
	
	
	window_style := WS_OVERLAPPEDWINDOW
	
	window_rect: RECT
	
	window_rect.top = 0
	window_rect.bottom = window_height
	window_rect.left = 0
	window_rect.right = window_width
	
	AdjustWindowRectEx(*window_rect, window_style ^ WS_OVERLAPPED | WS_TILED)
	
	window_handle := CreateWindowExW(lpClassName = class_name, lpWindowName = create_wide_string("Test Window"), dwStyle = window_style, 
		nWidth = window_rect.right - window_rect.left, nHeight = window_rect.bottom - window_rect.top, hInstance = instance)
	
	if window_handle == null {
		print("Failed to open window\n")
		print(GetLastError())
		return
	}
	
	ShowWindow(window_handle, cast() show_command)
	
	should_quit := false
	
	while !should_quit {
		message: MSG = --
		
		while PeekMessageW(*message, null) {
			if (message.message == WM_QUIT) {
				should_quit = true
				break
			}
			
			TranslateMessage(*message)
			DispatchMessageW(*message)
		}
		
	}
}