// Adapted from PCG random minimal C implementation: https://www.pcg-random.org/download.html

// *Really* minimal PCG32 code / (c) 2014 M.E. O'Neill / pcg-random.org
// Licensed under Apache License 2.0 (NO WARRANTY, etc. see website)

Random_State :: struct {
	state: u64  
	inc: u64
}

create_random :: (state: u64, inc: u64) -> Random_State {
	rng: Random_State = --
	rng.state = state
	rng.inc = inc
	
	return rng
}

random_u32 :: (rng: *Random_State) -> u32 {
    oldstate := rng.state
    // Advance internal state
    rng.state = oldstate * 6364136223846793005 + (rng.inc | 1)
	
    // Calculate output function (XSH RR), uses old state for max ILP
    xorshifted := cast(u32) (((oldstate >> 18) ^ oldstate) >> 27)
    rot := cast(u32) (oldstate >> 59)
    return (xorshifted >> rot) | (xorshifted << ((-rot) & 31))
}

random_f32 :: (rng: *Random_State) -> f32 {
	return cast(f32) random_u32(rng) * 0x1p-32
}

random_bilateral :: (rng: *Random_State) -> f32 {
	return random_f32(rng) * 2 - 1
}