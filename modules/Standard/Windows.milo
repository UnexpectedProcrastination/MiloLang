#import "Windows"

allocate :: (size: u64) -> #must *void {
	if !process_heap process_heap = GetProcessHeap()
	return HeapAlloc(process_heap, 0, size)
}



reallocate :: (block: *void, size: u64) -> #must *void {
	if block == null
		return allocate(size)
	else {			
		if !process_heap process_heap = GetProcessHeap()
		return HeapReAlloc(process_heap, 0, block, size)
	}
}

deallocate :: (block: *void) {
	if !process_heap process_heap = GetProcessHeap()
	HeapFree(process_heap, 0, block)
}

exit :: (code: u32 = 0) {
	ExitProcess(code)
}


// @Unicode
print_buffer :: (buffer: []u8) {
	if !std_out std_out = GetStdHandle(STD_OUTPUT_HANDLE)
	WriteConsoleA(std_out, buffer.data, cast() buffer.count)
}

#scope_module

std_out: HANDLE
process_heap: HANDLE