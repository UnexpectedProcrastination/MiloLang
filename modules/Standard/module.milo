#if TARGET_WINDOWS {
	#load "Windows.milo"
} else {
	unsupported_os: u64 = "error"
}

Vector2 :: union {
	using _xy: struct {
		x: f32
		y: f32
	}
	
	elements: [2]f32 = --
	
	print_me :: (using vector: *Vector2) {
		print("(%, %)", x, y)
	}
}


Vector3 :: union {
	using _xyz: struct {
		x: f32
		y: f32
		z: f32
	}
	
	elements: [3]f32 = --
	
	xy: Vector2 = --
	
	print_me :: (using vector: *Vector3) {
		print("(%, %, %)", x, y, z)
	}
}

Vector4 :: union {
	using xyzw : struct {
		x: f32
		y: f32
		z: f32
		w: f32
	}
	
	using rgba : struct {
		r: f32
		g: f32
		b: f32
		a: f32
	} = --
	
	elements: [4]f32 = --
	
	xyz: Vector3 = --
	xy: Vector2 = --
	
	
	print_me :: (using vector: *Vector4) {
		print("(%, %, %, %)", x, y, z, w)
	}
}


min :: (a: u64, b: u64) -> #must u64 {
	if a < b 
		return a
	else 
		return b
}

max :: (a: u64, b: u64) -> #must u64 {
	if a > b 
		return a
	else 
		return b
}


print_string :: (s: string) {
	print_buffer(cast() s)
}

copy_string :: (s: string) -> #must string {
	result := s

	result.data = allocate(s.count)
	
	memory_copy(result.data, s.data, s.count)
	
	return result
}

args: []string

memory_copy :: (dst: *void, src: *void, count: u64) {
	a : *u8 = dst
	b: *u8 = src
	
	for i: 0 .. count {
		a[i] = b[i]
	}
}

get_array_pointer :: (data: *u8, index: u64, size: u64) -> *void {
	return data + index * size
}

array_add :: (array: *[..]u8, value: any) -> *void {
	size := value.value_type.size

	if array.count >= array.capacity {
		array.capacity = max(array.count * 2, 4)
		
		array.data = reallocate(array.data, array.capacity * size)
	}
	
	dest := get_array_pointer(array.data, array.count, size)
	
	memory_copy(dest, value.value_pointer, size)
	array.count += 1
	
	return dest
}

array_add_generic :: (array: *[..]u8, value: *void, size: u64) -> *void {
	if array.count >= array.capacity {
		array.capacity = max(array.count * 2, 4)
		
		array.data = reallocate(array.data, array.capacity * size)
	}
	
	dest := get_array_pointer(array.data, array.count, size)
	
	memory_copy(dest, value, size)
	array.count += 1
	
	return dest
}

panic :: () {
	print_string("Panic")
	
	exit(1)
}

assert :: (value: bool) {
	if !value {
		print("Assertion failed!")
		exit(1)
	}
}

array_remove_generic_by_pointer :: (array: *[]u8, value: *void, size: u64) {
	assert(value >= array.data)
	assert(value < get_array_pointer(array.data, array.count, size))
	assert(cast() (value - cast() array.data) % size == 0)
	
	array.count -= 1
	
	end := get_array_pointer(array.data, array.count, size)
	
	if value != end
		memory_copy(value, end, size)
	
}

array_remove_string_by_pointer :: (array: *[]string, value: *string) {
	array_remove_generic_by_pointer(cast() array, value, size_of(string))
}


// @Incomplete, only converts ascii to UTF16, not UTF8
create_wide_string :: (s: string) -> #must *u16 {
	result: *u16 = allocate((s.count + 1) * size_of(u16))
	
	for s {
		result[it_index] = it
	}
	
	result[s.count] = 0
	
	return result
}

get_command_line_arguments :: () -> []string {
	return args
}

DIGIT_TABLE :: "0123456789abcdefghijklmnopqrstuvwxyz"

u64_to_string :: (value: u64, base: u64 = 10) -> #must string {
	if base > 36 || base < 2 {
		return ""
	}

	if value == 0 {
		return copy_string("0")
	}

	result: string
	digitCount: u64
	
	remaining := value
	
	while remaining {
		result.count += 1
		
		remaining /= base
	}
	
	result.data = allocate(result.count)
	
	index := result.count
	remaining = value
	
	while remaining {
		index -= 1;
		
		result[index] = DIGIT_TABLE[remaining % base]
		remaining /= base
	}
	
	return result
}

print_u64 :: (num: u64, base: u64 = 10) {
	s := u64_to_string(num, base)
	defer deallocate(s.data)
	
	print_string(s)
}

read_integer :: (value: any) -> u64 {
	mask: u64
	number: u64

	if value.value_type.size == {
		case 1
			number = cast(u8) value
			mask = 1 << 7
		case 2
			number = cast(u16) value
			mask = 1 << 15
		case 4
			number = cast(u32) value
			mask = 1 << 31
		case 8
			number = cast(u64) value
			mask = 1 << 63
	}
	
	if (cast(*Type_Info_Integer) value.value_type).signed && (number & mask)
		number |= ~(mask | (mask - 1))
	
	return number
}

// @Unicode
print_char :: (value: u8) {
	char := value
	buffer: []u8
	buffer.count = 1
	buffer.data = *char
	
	print_buffer(buffer)
}


is_infinite :: (x: f64) -> bool {
	bits := cast,bit(u64) x
	
	return (bits & 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000 && (bits & 0x000F_FFFF_FFFF_FFFF) == 0
}

is_nan :: (x: f64) -> bool {
	bits := cast,bit(u64) x
	
	return (bits & 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000 && (bits & 0x000F_FFFF_FFFF_FFFF)
}


// This function is terrible
print_f64 :: (num: f64, decimal_places: u64 = 6, base: u64 = 10) {
	value := num

	if is_nan(value) {
		print_string("NaN")
		return
	}

	if (value < 0) {
		print_string("-")
		value = -value
	}
	
	if is_infinite(value) {
		print_string("infinity")
		return
	}
	
	if num >= 1p64 {
		print_string("unhandled case in print_f64")
		return
	}
	
	integer_part := cast(u64) value
	
	print_u64(integer_part, base)
	
	print_string(".")
	
	for decimal_places {
		value *= cast(f64) base
		
		integer := cast(u64) value
		
		print_char(DIGIT_TABLE[integer % base])
	}
}

print :: (format: string, vals: any..) {
	index: u64
	
	for format
		if it == '%' {
			if index > vals.count
				return;
			print_any(vals[index])
			index += 1
		} else {
			print_char(it)
		}
			
}


print_any :: (using val: any) {
	if !value_type
		print_string("<Error no type info in print>")
	else if value_type == type_info(void) 
		print_string("void")
	else if value_type == type_info(type) {
	
		print_string(type_info(cast() val).name)
		
	} else if value_type == type_info(bool) {
		value := cast(bool) val
	
		if value
			print_string("true")
		else
			print_string("false")
		
	} else if value_type == type_info(string) {
	
		print_string(cast() val)
		
	} else if value_type.tag == .INTEGER {		
		value := read_integer(val)
		
		if (cast(*Type_Info_Integer) value_type).signed && (value & (1 << 63)) {
			print_string("-")
			value = -value
		}
		
		print_u64(value)
	} else if value_type.tag == .ENUM {
		info := cast(*Type_Info_Enum) value_type
		
		integer_value := val
		integer_value.value_type = info.base_type
		
		value := read_integer(integer_value)

		if info.is_flags {
			first := true
			
			for info.values {
				if value & it.value {
					value &= ~it.value
				
					if !first print_string(" | ")
					
					if info.name {
						if first
							print_string(info.name)
							
						print_string(".")
					}
					
					first = false
					
					print_string(it.name)
				}
			}
			
			print_invalid :: (value: u64) {
				print_string("(INVALID enum_flags ")
				print_u64(value, 16)
				print_string(")")
			}
			
			if first {
				if value {
					if info.name {
						print("%.", info.name)
					}
					
					print_invalid(value)
				} else
					print_string("0")
			} else if value {
				print_string(" | ")
				
				if info.name
					print_string(".")
				
				print_invalid(value)
			}
		} else {
			for info.values {
				if value == it.value {
					if info.name {
						print_string(info.name)
						print_string(".")
					}
				
					print_string(it.name)
					break
				}
			} or {
				num: any = --
				num.value_pointer = value_pointer
				num.value_type = info.base_type
				
				print("(INVALID enum %)", num)
			}
		}
		
		
	} else if value_type.tag == .POINTER || value_type.tag == .FUNCTION {
	
		print_u64(cast(u64) val, 16)
		
	} else if value_type.tag == .ARRAY {
	
		info := cast(*Type_Info_Array) value_type
		
		count: u64 = --
		
		if info.flavor == .FIXED {
			count = info.count
		} else {
			count = (cast([]u8) val).count
		}
		
		print("[%]%", count, info.element_type.name)
		
	} else if value_type.tag == .STRUCT {	
		info := cast(*Type_Info_Struct) value_type
		
		for info.members {
			if it.name == "print_me" && it.member_type.tag == .FUNCTION {
				func := cast(*Type_Info_Function) it.member_type
				
				if func.arguments.count == 1 && func.arguments[0].tag == .POINTER && 
					(cast(*Type_Info_Pointer) func.arguments[0]).value_type == cast() info && 
					func.returns.count == 1 && func.returns[0] == type_info(void) {
					f: (*void) -> void 
					
					if it.flags & .CONSTANT {
						f = <<cast(*type_of(f)) it.initial_value
					} else {
						f = <<cast(*type_of(f)) (value_pointer + it.offset)
					}
					
					f(value_pointer)
					break
				}
			}
		} or {
		
			print_string("{ ")
		
			for info.members {
				if !(it.flags & .CONSTANT) {
					val: any = --
					val.value_pointer = value_pointer + it.offset
					val.value_type = it.member_type
					
					print("% = % ", it.name, val)
				}
			}
			
			print_string("}")

		}		
	} else if value_type == type_info(f64) {
	
		print_f64(cast(f64) val)
		
	} else if value_type == type_info(f32) {
	
		print_f64(cast() cast(f32) val)
		
	} else {
	
		print("Cannot print %", value_type.name)
		
	}
}